#include "Ds18b20.h"
#include "LiquidCrystal_I2C.h"
#include <inttypes.h>
#include "BarChars.h"
#include "LoopRecorder.h"
#include "LoopTimer.h"
#include "LiquidCrystalChart.h"
#include "Button.h"
#include "Adafruit_BMP280.h"

Adafruit_BMP280* bmp = new Adafruit_BMP280();
Ds18b20* outsideTemp = new Ds18b20(PB11);
LiquidCrystal_I2C* lcd = new LiquidCrystal_I2C(0x3F, 20, 4);
const uint8_t DAY_SAMPLES = 240; // sample each six minute
const uint8_t DISPLAY_BARS = 20;
const uint8_t DISPLAY_ROWS = 4;
const uint8_t MENU_SCREENS = 4;
BarChars* barChar =  new BarChars(*lcd);
LiquidCrystalChart* chartBar = new LiquidCrystalChart(*lcd, *barChar, 0, 1, 3, DISPLAY_BARS);
LoopRecorder<float>* dailyTempRec = new LoopRecorder<float>(DAY_SAMPLES);
LoopRecorder<float>* dailyPressRec = new LoopRecorder<float>(DAY_SAMPLES);
LoopRecorder<float>* dailyHumiRec = new LoopRecorder<float>(DAY_SAMPLES);
LoopTimer* measure = new LoopTimer(5000); //360000
LoopTimer* control = new LoopTimer(5000);  //10000
Button* buttTemp = new Button(PB12);
Button* buttPress = new Button(PB13);
Button* buttHumi = new Button(PB14);
uint8_t menuPosition = 0; // pages
uint8_t menuParameter = 0; // 0 = temp, 1 = pressure, 2 = humidity

bool firstRun = true;
float currentValues[3];
float differences[3];
float minValues[3];
float maxValues[3];
float longTermMin[3];
float longTermMax[3]; 
uint32_t countOfMeasures = 0;
uint8_t dailyGraph[DISPLAY_BARS];

void setup(void)
{
    pinMode(LED_BUILTIN, OUTPUT);
    bmp->begin();
    lcd->begin();
    barChar->createBarLevels();
    for(uint8_t i = 0; i < DISPLAY_BARS; ++i)
      dailyGraph[i] = 0;
    Serial.begin(9600);
    for(uint8_t i = 0; i < 3; ++i)
    {
      currentValues[i] = 0;
      differences[i] = 0;
      minValues[i] = 0;
      maxValues[i] = 0;
    }
    longTermMin[0] = 200;
    longTermMax[0] = -200;
    longTermMin[1] = 20000;
    longTermMax[1] = -20000;
    longTermMin[2] = 20000;
    longTermMax[2] = -20000; 
}

float getAverageValue(const LoopRecorder<float>& data, const uint8_t samplesCount)
{
  float value = 0;
  uint8_t empty = 0;
  float sumOfValues = 0;
  for(uint8_t i = 0; i < samplesCount; ++i)
  {
    if(data.getLastSample(i, value))
      sumOfValues += value;
    else
      ++empty;
  }
  return sumOfValues / (samplesCount - empty);
}

float getMaxValue(const LoopRecorder<float>& data, const uint8_t samplesCount)
{
  float maxValue = -200;
  float value;
  for(uint8_t i = 0; i < samplesCount; ++i)
  {
    if(data.getLastSample(i, value))
      if(maxValue < value)
        maxValue = value;
  }
  return maxValue;
}

float getMinValue(const LoopRecorder<float>& data, const uint8_t samplesCount)
{
  float minValue = 200;
  float value; 
  for(uint8_t i = 0; i < samplesCount; ++i)
  {
    if(data.getLastSample(i, value))
      if(minValue > value)
        minValue = value;
  }  
  return minValue;
}

void getlongTermMinMax(uint8_t i)
{
  if(i == 0)
    countOfMeasures++;
  if(currentValues[i] > longTermMax[i])
    longTermMax[i] = currentValues[i];
  if(currentValues[i] < longTermMin[i])
    longTermMin[i] = currentValues[i];
}

void loop(void)
{ 
  bool measureUpdate = false;
  showBeginScreenProcedure();
    
  if(measure->timer())
  {
    hourUpdate();
    measureUpdate = true;
  }
  

    
  if(buttonMenuMovementLogic() || measureUpdate)
  {     
    if(menuPosition <= 1)
    {
      if(menuParameter == 0)
        showTempMainScreen();
      else
        showPressureMainScreen();
    }
    else if(menuPosition == 2)
      showDayComparationScreen();
    else if(menuPosition == 3)
     showMinMaxScreen();
    else if(menuPosition == 4)
      showInfoScreen();
    lcd->setCursor(0,3);
    lcd->print(menuPosition);
  }
}

void showBeginScreenProcedure()
{
  if(firstRun)
  {
    lcd->backlight();
    showWelcomeScreen();
    delay(2000); // mainly delay is requried DS18B20 get error 85 degrees at the power boot;
    lcd->noBacklight();
    firstRun = false;
  }
}

bool buttonMenuMovementLogic()
{
  
  bool updateScreen = false;
  bool pressedTemp = buttTemp->isPressed();
  bool pressedPress = buttPress->isPressed();
  bool pressedHumi= buttHumi->isPressed();
  
  if(menuPosition >= MENU_SCREENS)
    menuPosition = 0;

  if(control->timer())
  {
    menuPosition = 0;
    updateScreen = true;
  } 

  if(menuPosition > 0)
    lcd->backlight();
  else
    lcd->noBacklight();
    
  if(pressedTemp || pressedPress || pressedHumi)
  {
    control->resetTimer();
    updateScreen = true;

    if(pressedTemp)
    {
      if(menuParameter == 0)
        menuPosition++;
      else
      {
        menuPosition = 1;
        menuParameter = 0;
      }
    }
    else if(pressedPress)
    {
      if(menuParameter == 1)
        menuPosition++;
      else
      {
        menuPosition = 1;
        menuParameter = 1;
      }
    }
    else if(pressedHumi)
    {
      if(menuParameter == 2)
        menuPosition++;
      else
      {
        menuPosition = 1;
        menuParameter = 2;
      }
    }
  }
  
  return updateScreen;
}

void hourUpdate()
{
  currentValues[0] = outsideTemp->getCelsiusTemp(0);
  getlongTermMinMax(0);
  dailyTempRec->pushBack(currentValues[0]);
  minValues[0] = getMinValue(*dailyTempRec, DAY_SAMPLES);
  maxValues[0] = getMaxValue(*dailyTempRec, DAY_SAMPLES);
  differences[0] = maxValues[0] - minValues[0];  
  uint8_t samplesAtBar = DAY_SAMPLES / DISPLAY_BARS;  
  for(uint8_t bar = 0; bar < DISPLAY_BARS; ++bar)
  {
    uint8_t leftSample = samplesAtBar * bar;
    uint8_t rightSample = leftSample + samplesAtBar;
    float averageForBar = 0;
    float sumOfAll = 0;
    uint8_t count = 0;
    bool foundMaxBar = false;
    bool foundMinBar = false;
    for(uint8_t sample = leftSample; sample < rightSample; ++sample)
    { // calculate average with more samples to one bar          
      float value = 0;
      if(dailyTempRec->getLastSample(sample, value))
      {
        sumOfAll += value;
        ++count;
        if(value == maxValues[0])
          foundMaxBar = true;
        if(value == minValues[0]) 
          foundMinBar = true;
      }   
    }
    if(count > 0 && sumOfAll > 0)
      averageForBar = sumOfAll / count;
    else
      averageForBar = 0;
    uint8_t inversIndex = DISPLAY_BARS - 1 - bar;
    Serial.println(count);
    if(count == samplesAtBar)
    {
      uint8_t level = 255 * ((averageForBar - minValues[0]) / differences[0]);
      if(foundMaxBar && foundMinBar)
        dailyGraph[inversIndex] = level; //almost impossible
      else if(foundMaxBar)
        dailyGraph[inversIndex] = 255;   //optimise fit to above level
      else if(foundMinBar)
        dailyGraph[inversIndex] = 0;     //optimise fit to below level
      else
        dailyGraph[inversIndex] = level; //standard scenario        
    }      
    else
      dailyGraph[inversIndex] = 0;      //empty data storage
  }   
}

void showTempMainScreen()
{   
   chartBar->plotChart(dailyGraph);
   showCelsiusTemperatureLeft(0, 0, currentValues[0]);
   showCelsiusTemperatureRight(8, 0, differences[0]);
}
void showPressureMainScreen()
{   
   chartBar->plotChart(dailyGraph);
   showPressureRight(0, 0, bmp->readPressure());
}

void showMinMaxScreen()
{
  lcd->setCursor(0,0);
  lcd->printstr("Mini_24:");
  showCelsiusTemperatureRight(8, 0, minValues[0]);
  
  lcd->setCursor(0,1);
  lcd->printstr("Maxi_24:");
  showCelsiusTemperatureRight(8, 1, maxValues[0]);

  lcd->setCursor(0,2);
  lcd->printstr("Minimal:");
  showCelsiusTemperatureRight(8, 2, longTermMin[0]);
  
  lcd->setCursor(0,3);
  lcd->printstr("Maximal:");
  showCelsiusTemperatureRight(8, 3, longTermMax[0]); 
}

void showInfoScreen()
{
  lcd->setCursor(0,0);
  lcd->printstr("Merania:");
  uint8_t digits = numDigits(countOfMeasures);
  clearChars(8, 16 - digits, 0);
  lcd->setCursor(DISPLAY_BARS - digits, 0);
  lcd->print(countOfMeasures);

  lcd->setCursor(0,1);
  lcd->printstr("MeraDni:");
  uint32_t days = countOfMeasures / DAY_SAMPLES;
  digits = numDigits(days);
  clearChars(8, 16 - digits, 1);
  lcd->setCursor(16 - digits, 1);
  lcd->print(days);
}

void showDayComparationScreen()
{
  lcd->setCursor(0,0);
  float dayAgoTemp = 0;
  float dayDiffTemp = 0;
  if(dailyTempRec->getLastSample(DAY_SAMPLES - 1 , dayAgoTemp)) 
  {
    if(dayAgoTemp < currentValues[0])
    {
      lcd->printstr("Dnes teplejsie");
      dayDiffTemp = currentValues[0] - dayAgoTemp; 
    } 
    else
    {
      lcd->printstr("Dnes chladnejsie");
      dayDiffTemp = dayAgoTemp - currentValues[0];
    }
    showCelsiusTemperatureLeft(0, 1, dayDiffTemp);    
  }
  else
  {
    lcd->printstr("Pockaj 24 hodin ");
  }
}

void showWelcomeScreen()
{
  lcd->setCursor(0,0);
  lcd->printstr("Jozef Lukac 2017");
  lcd->setCursor(0,1);
  lcd->printstr("Teplomer STM v1.1");
}

void showCelsiusTemperatureLeft(uint8_t xCursor, const uint8_t yCursor, const float& temperature)
{
   uint8_t space = 0;
   lcd->setCursor(xCursor,yCursor);
   lcd->print(temperature);
   xCursor += 4;
   if((10.00 <= temperature) || (-10.00 < temperature && temperature < 0))
     space++;
   else if(temperature <= -10.00)
     space += 2; 
   xCursor += space;
   lcd->setCursor(xCursor, yCursor);
   lcd->print((char)0xDF);
   xCursor++;
   lcd->setCursor(xCursor, yCursor);
   lcd->print((char)0x43);
   xCursor++;
   clearChars(xCursor, xCursor + (2 - space), yCursor);
}

void showCelsiusTemperatureRight(uint8_t xCursor, const uint8_t yCursor, const float& temperature)
{
   uint8_t whiteSpace = 0;
   if((10.00 <= temperature) || (-10.00 < temperature && temperature < 0))
     whiteSpace++;
   else if(0 <= temperature && temperature < 10.00)
     whiteSpace += 2;
   clearChars(xCursor, xCursor + whiteSpace, yCursor);      
   lcd->setCursor(xCursor + whiteSpace, yCursor);
   lcd->print(temperature);
   lcd->setCursor(xCursor + 6, yCursor);
   lcd->print((char)0xDF);
   lcd->setCursor(xCursor + 7, yCursor);
   lcd->print((char)0x43);
}

void showPressureLeft(uint8_t xCursor, const uint8_t yCursor, const float& pressure)
{
  uint32_t showPressure = getPressureForDisplay(pressure);
  lcd->setCursor(xCursor, yCursor);
  showPressureValue(showPressure);  
  lcd->setCursor(xCursor + numDigits(showPressure), yCursor);
  lcd->printstr("hPa");  
}

void showPressureRight(uint8_t xCursor, const uint8_t yCursor, const float& pressure)
{
  uint32_t showPressure = getPressureForDisplay(pressure);
  uint8_t digits = numDigits(showPressure);
  lcd->setCursor(xCursor + 4 - digits, yCursor);
  showPressureValue(showPressure);    
  lcd->setCursor(xCursor + 4, yCursor);
  lcd->printstr("hPa");
}

uint32_t getPressureForDisplay(const float& pressure)
{
  if(numDigits(pressure) >= 5 && numDigits(pressure) <= 6)
    return static_cast<uint32_t>(pressure / 100);
  else
    return 0;
}

void showPressureValue(uint32_t showPressure)
{
  if(showPressure != 0)
    lcd->print(showPressure);
  else
    lcd->print((char)0xF2);
}


void clearChars(const uint8_t fromX, const uint8_t toX, const uint8_t line)
{
  for(uint8_t i = fromX; i < toX; ++i)
  {
    lcd->setCursor(i, line);
    lcd->print((char)0x20);
  }  
}

uint8_t numDigits(uint32_t x)  
{
    return (x < 10 ? 1 :   
        (x < 100 ? 2 :   
        (x < 1000 ? 3 :   
        (x < 10000 ? 4 :   
        (x < 100000 ? 5 :   
        (x < 1000000 ? 6 :   
        (x < 10000000 ? 7 :  
        (x < 100000000 ? 8 :  
        (x < 1000000000 ? 9 :  
        10)))))))));  
} 







